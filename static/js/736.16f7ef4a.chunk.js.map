{"version":3,"file":"static/js/736.16f7ef4a.chunk.js","mappings":"wPAEaA,EAAUC,EAAAA,GAAAA,IAAH,2EAKPC,EAAaD,EAAAA,GAAAA,GAAH,wFAMVE,EAAWF,EAAAA,GAAAA,GAAH,yHAQRG,EAAeH,EAAAA,GAAAA,GAAH,gHAMZI,EAAWJ,EAAAA,GAAAA,IAAH,kEAKRK,EAAWL,EAAAA,GAAAA,GAAH,gD,GAIKA,EAAAA,GAAAA,EAAH,mN,QCqBvB,EA7Ca,WACX,IAAQM,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAgCE,EAAAA,EAAAA,UAAS,IAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KAcA,OAZAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,gHAESC,EAAAA,EAAAA,IAAeP,GAFxB,gBAENQ,EAFM,EAENA,KACRJ,EAAYI,GAHE,gDAKdC,QAAQC,IAAR,MALc,yDAAH,qDAQfJ,GACD,GAAE,CAACN,KAGF,UAACP,EAAD,YACE,SAACE,EAAD,mBADF,KAEE,SAACC,EAAD,UACGO,EAASQ,KAAI,SAAAC,GAAK,OACjB,UAACf,EAAD,WACGe,EAAMC,cACL,gBACEC,IAAG,yCAAoCF,EAAMC,cAC7CE,IAAG,UAAKH,EAAMI,KAAX,eAGL,gBACEF,IAAG,oDACHC,IAAG,UAAKH,EAAMI,KAAX,eAGP,UAAClB,EAAD,YACE,SAACC,EAAD,UAAWa,EAAMI,OADnB,KAEE,uCAAeJ,EAAMK,aAAe,SAdrBL,EAAMM,GADR,QAuB1B,C,mMCvDYC,EAAU,mCCEvBC,EAAAA,EAAAA,SAAAA,QAAyB,+BAElB,IAAMC,EAAgB,mCAAG,sGACPD,EAAAA,EAAAA,IAAA,sCAAyCD,IADlC,uBACtBG,EADsB,EACtBA,KADsB,kBAGvBA,GAHuB,2CAAH,qDAMhBC,EAAmB,mCAAG,WAAMC,GAAN,yFACVJ,EAAAA,EAAAA,IAAA,gCACID,EADJ,iCACoCK,IAF1B,uBACzBF,EADyB,EACzBA,KADyB,kBAK1BA,GAL0B,2CAAH,sDAQnBG,EAAc,mCAAG,WAAMzB,GAAN,yFACLoB,EAAAA,EAAAA,IAAA,iBACXpB,EADW,oBACQmB,EADR,oBADK,uBACpBG,EADoB,EACpBA,KADoB,kBAKrBA,GALqB,2CAAH,sDAQdf,EAAc,mCAAG,WAAMP,GAAN,yFACLoB,EAAAA,EAAAA,IAAA,iBACXpB,EADW,4BACgBmB,EADhB,oBADK,uBACpBG,EADoB,EACpBA,KADoB,kBAKrBA,GALqB,2CAAH,sDAQdI,EAAiB,mCAAG,WAAM1B,GAAN,yFACRoB,EAAAA,EAAAA,IAAA,iBACXpB,EADW,4BACgBmB,EADhB,2BADQ,uBACvBG,EADuB,EACvBA,KADuB,kBAIxBA,GAJwB,2CAAH,qD","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","services/ApiKey.jsx","services/api.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  margin-top: 30px;\n  padding: 0 80px 40px 80px;\n`;\n\nexport const CastHeader = styled.h3`\n  font-size: 25px;\n  font-weight: 500;\n  text-align: center;\n`;\n\nexport const CastList = styled.ul`\n  margin-top: 30px;\n  display: flex;\n  align-items: center;\n  gap: 40px;\n  flex-wrap: wrap;\n`;\n\nexport const CastListItem = styled.li`\n  flex-basis: calc((100% - 4 * 40px) / 5);\n  height: 400px;\n  word-wrap: break-word;\n`;\n\nexport const CastInfo = styled.div`\n  margin-top: 20px;\n  max-width: 220px;\n`;\n\nexport const CastName = styled.h3`\n  margin-bottom: 10px;\n`;\n\nexport const NoCastText = styled.p`\n  margin: 30px auto 0 auto;\n  text-align: center;\n  padding: 20px;\n  background-color: #f8f8f8;\n  border-radius: 5px;\n  box-shadow: 0 0 5px rgba(0, 0, 0, 0.2);\n  max-width: 500px;\n`;\n","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { fetchMovieCast } from '../../services/api';\nimport {\n  CastHeader,\n  CastInfo,\n  CastList,\n  CastListItem,\n  CastName,\n  Wrapper,\n} from './Cast.styled';\n\nconst Cast = () => {\n  const { movieId } = useParams(); // Отримуємо параметри шляху з URL\n  const [castList, setCastList] = useState([]); // Стан для збереження списку акторів\n\n  useEffect(() => {\n    const fetchCast = async () => {\n      try {\n        const { cast } = await fetchMovieCast(movieId); // Виклик функції для отримання списку акторів\n        setCastList(cast); // Збереження списку акторів у стані\n      } catch (error) {\n        console.log(error); // Обробка помилок\n      }\n    };\n    fetchCast(); // Виклик функції отримання списку акторів при завантаженні компонента та зміні movieId\n  }, [movieId]);\n\n  return (\n    <Wrapper>\n      <CastHeader>Cast</CastHeader> {/* Заголовок компонента */}\n      <CastList>\n        {castList.map(actor => (\n          <CastListItem key={actor.id}>\n            {actor.profile_path ? ( // Перевірка наявності постера актора\n              <img\n                src={`https://image.tmdb.org/t/p/w200${actor.profile_path}`} // URL постера актора\n                alt={`${actor.name} profile`}\n              />\n            ) : (\n              <img\n                src={`https://via.placeholder.com/200x300?text=No+Image`} // Замінний URL постера\n                alt={`${actor.name} profile`}\n              />\n            )}\n            <CastInfo>\n              <CastName>{actor.name}</CastName> {/* Виведення імені актора */}\n              <p>Character: {actor.character}</p>{' '}\n              {/* Виведення персонажа актора */}\n            </CastInfo>\n          </CastListItem>\n        ))}\n      </CastList>\n    </Wrapper>\n  );\n};\n\nexport default Cast;\n","export const API_KEY = '84068d2acd9315c3be219a34cf5a6c3a';\n","import axios from 'axios';\nimport { API_KEY } from './ApiKey';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport const fetchTrendMovies = async () => {\n  const { data } = await axios.get(`/trending/movie/day?api_key=${API_KEY}`);\n\n  return data;\n};\n\nexport const fetchMoviesBySearch = async query => {\n  const { data } = await axios.get(\n    `/search/movie?api_key=${API_KEY}&language=en-US&query=${query}`\n  );\n\n  return data;\n};\n\nexport const fetchMovieById = async movieId => {\n  const { data } = await axios.get(\n    `/movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n\n  return data;\n};\n\nexport const fetchMovieCast = async movieId => {\n  const { data } = await axios.get(\n    `/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n\n  return data;\n};\n\nexport const fetchMovieReviews = async movieId => {\n  const { data } = await axios.get(\n    `/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  return data;\n};\n"],"names":["Wrapper","styled","CastHeader","CastList","CastListItem","CastInfo","CastName","movieId","useParams","useState","castList","setCastList","useEffect","fetchCast","fetchMovieCast","cast","console","log","map","actor","profile_path","src","alt","name","character","id","API_KEY","axios","fetchTrendMovies","data","fetchMoviesBySearch","query","fetchMovieById","fetchMovieReviews"],"sourceRoot":""}