{"version":3,"file":"static/js/891.69a0cb5d.chunk.js","mappings":"qPAGaA,EAAeC,EAAAA,GAAAA,OAAH,0GAMZC,GAAgBD,EAAAA,EAAAA,IAAOE,EAAAA,GAAPF,CAAH,0UAoBpBG,GAASC,EAAAA,EAAAA,IAAH,kHASCC,EAAcL,EAAAA,GAAAA,IAAH,gHAOXM,EAAMN,EAAAA,GAAAA,IAAH,kOAODG,GACM,qBAAGI,KAAH,G,sDCxCrB,IAVyB,WACvB,OACE,UAAC,KAAD,YACE,SAAC,KAAD,CAAKA,MAAM,QACX,SAAC,KAAD,CAAKA,MAAM,SACX,SAAC,KAAD,CAAKA,MAAM,UAGhB,C,mMCRYC,EAAgBR,EAAAA,GAAAA,QAAH,4CAIbS,EAAeT,EAAAA,GAAAA,GAAH,iIAQZU,EAAOV,EAAAA,GAAAA,GAAH,sEAKJW,EAAWX,EAAAA,GAAAA,GAAH,+CAIRY,GAAaZ,EAAAA,EAAAA,IAAOa,EAAAA,GAAPb,CAAH,0J,gKCGvB,EAjBkB,SAAC,GAAwB,IAAtBc,EAAqB,EAArBA,eACnB,OACE,UAAC,KAAD,YACE,SAAC,KAAD,8BACA,SAAC,KAAD,UACGA,EAAeC,KAAI,SAAAC,GAAa,OAC/B,SAAC,KAAD,WACE,SAAC,KAAD,CAAYC,GAAE,kBAAaD,EAAcE,IAAzC,SACGF,EAAcG,SAFJH,EAAcE,GADE,QAUxC,ECgBD,EApCa,WACX,OAA4CE,EAAAA,EAAAA,UAAS,IAArD,eAAON,EAAP,KAAuBO,EAAvB,KACA,GAAkCD,EAAAA,EAAAA,WAAS,GAA3C,eAAOE,EAAP,KAAkBC,EAAlB,KACA,GAA0BH,EAAAA,EAAAA,WAAS,GAAnC,eAAOI,EAAP,KAAcC,EAAd,KAiBA,OAfAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAmB,mCAAG,gHAEEC,EAAAA,EAAAA,MAFF,gBAEhBC,EAFgB,EAEhBA,QACRR,EAAkBQ,GAHM,gDAKxBJ,GAAS,GALe,yBAOxBF,GAAa,GAPW,4EAAH,qDAWzBI,GACD,GAAE,KAGD,gCACGL,IAAa,SAACQ,EAAA,EAAD,IAEbN,GACC,mGAIA,SAAC,EAAD,CAAWV,eAAgBA,MAKlC,C,mMCvCYiB,EAAU,mCCEvBC,EAAAA,EAAAA,SAAAA,QAAyB,+BAElB,IAAMJ,EAAgB,mCAAG,sGACPI,EAAAA,EAAAA,IAAA,sCAAyCD,IADlC,uBACtBE,EADsB,EACtBA,KADsB,kBAGvBA,GAHuB,2CAAH,qDAMhBC,EAAmB,mCAAG,WAAMC,GAAN,yFACVH,EAAAA,EAAAA,IAAA,gCACID,EADJ,iCACoCI,IAF1B,uBACzBF,EADyB,EACzBA,KADyB,kBAK1BA,GAL0B,2CAAH,sDAQnBG,EAAc,mCAAG,WAAMC,GAAN,yFACLL,EAAAA,EAAAA,IAAA,iBACXK,EADW,oBACQN,EADR,oBADK,uBACpBE,EADoB,EACpBA,KADoB,kBAKrBA,GALqB,2CAAH,sDAQdK,EAAc,mCAAG,WAAMD,GAAN,yFACLL,EAAAA,EAAAA,IAAA,iBACXK,EADW,4BACgBN,EADhB,oBADK,uBACpBE,EADoB,EACpBA,KADoB,kBAKrBA,GALqB,2CAAH,sDAQdM,EAAiB,mCAAG,WAAMF,GAAN,yFACRL,EAAAA,EAAAA,IAAA,iBACXK,EADW,4BACgBN,EADhB,2BADQ,uBACvBE,EADuB,EACvBA,KADuB,kBAIxBA,GAJwB,2CAAH,qD","sources":["components/Layout/Layout.styled.jsx","components/Layout/LoadingIndicator.jsx","components/MovieList/MovieList.styled.jsx","components/MovieList/MovieList.jsx","pages/Home.jsx","services/ApiKey.jsx","services/api.jsx"],"sourcesContent":["import styled, { keyframes } from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n\nexport const StyledHeader = styled.header`\n  padding: 20px 10px;\n  text-align: center;\n  box-shadow: 0px 4px 4px #d3d3d3;\n`;\n\nexport const StyledNavLink = styled(NavLink)`\n  display: inline-block;\n  font-size: 24px;\n  font-weight: 500;\n  text-decoration: none;\n  transition: color 0.2s ease-in-out;\n  color: #000000;\n\n  &:not(:last-child) {\n    margin-right: 40px;\n  }\n\n  &.active,\n  &:hover,\n  &:focus {\n    color: #e23838;\n    text-decoration: underline;\n  }\n`;\n\nconst bounce = keyframes`\n  0%, 80%, 100% {\n    transform: scale(0);\n  }\n  40% {\n    transform: scale(1);\n  }\n`;\n\nexport const LoadingDots = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 100vh;\n`;\n\nexport const Dot = styled.div`\n  display: inline-block;\n  width: 20px;\n  height: 20px;\n  margin-right: 10px;\n  border-radius: 50%;\n  background-color: #e23838;\n  animation: ${bounce} 1s infinite ease-in-out;\n  animation-delay: ${({ delay }) => delay};\n`;\n","import React from 'react';\nimport { LoadingDots, Dot } from './Layout.styled';\n\nconst LoadingIndicator = () => {\n  return (\n    <LoadingDots>\n      <Dot delay=\"0s\" />\n      <Dot delay=\".2s\" />\n      <Dot delay=\".4s\" />\n    </LoadingDots>\n  );\n};\n\nexport default LoadingIndicator;\n","import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const StyledSection = styled.section`\n  padding: 0 50px;\n`;\n\nexport const SectionTitle = styled.h2`\n  margin: 30px 0;\n  padding-left: 5px;\n  font-size: 30px;\n  font-weight: 600;\n  text-align: center;\n`;\n\nexport const List = styled.ul`\n  list-style: disc;\n  /* color: #f76c6c; */\n`;\n\nexport const ListItem = styled.li`\n  margin-bottom: 8px;\n`;\n\nexport const StyledLink = styled(Link)`\n  font-size: 20px;\n  color: #f76c6c;\n  transition: color 0.2s ease-in-out;\n\n  &:hover,\n  &:focus {\n    color: #e23838;\n  }\n`;\n","import {\n  List,\n  ListItem,\n  SectionTitle,\n  StyledLink,\n  StyledSection,\n} from './MovieList.styled';\n\nimport PropTypes from 'prop-types';\n\nconst MovieList = ({ trendingMovies }) => {\n  return (\n    <StyledSection>\n      <SectionTitle>Tranding Today</SectionTitle>\n      <List>\n        {trendingMovies.map(trendingMovie => (\n          <ListItem key={trendingMovie.id}>\n            <StyledLink to={`/movies/${trendingMovie.id}`}>\n              {trendingMovie.title}\n            </StyledLink>\n          </ListItem>\n        ))}\n      </List>\n    </StyledSection>\n  );\n};\n\nexport default MovieList;\n\nMovieList.propTypes = {\n  trendingMovies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      release_date: PropTypes.string.isRequired,\n      overview: PropTypes.string.isRequired,\n      poster_path: PropTypes.string,\n      vote_average: PropTypes.number.isRequired,\n    })\n  ).isRequired,\n};\n","import React, { useEffect, useState } from 'react';\nimport { fetchTrendMovies } from 'services/api';\nimport LoadingIndicator from 'components/Layout/LoadingIndicator'; // Імпорт компонента LoadingIndicator\nimport MovieList from 'components/MovieList/MovieList'; // Імпорт компонента MovieList\n\nconst Home = () => {\n  const [trendingMovies, setTrendingMovies] = useState([]); // Ініціалізація стану для списку трендових фільмів\n  const [isLoading, setIsLoading] = useState(true); // Ініціалізація стану для відображення індикатора завантаження\n  const [error, setError] = useState(false); // Ініціалізація стану для відображення повідомлення про помилку\n\n  useEffect(() => {\n    const fetchTrendingMovies = async () => {\n      try {\n        const { results } = await fetchTrendMovies();\n        setTrendingMovies(results); // Запис результатів отриманих даних в стан trendingMovies\n      } catch (error) {\n        setError(true); // Встановлення стану помилки при невдалому запиті\n      } finally {\n        setIsLoading(false); // Встановлення стану завершення завантаження\n      }\n    };\n\n    fetchTrendingMovies(); // Виклик функції для завантаження трендових фільмів\n  }, []);\n\n  return (\n    <>\n      {isLoading && <LoadingIndicator />}\n      {/* Відображення індикатора завантаження, якщо дані ще завантажуються */}\n      {error ? (\n        <p>\n          Sorry, we could not fetch the trending movies. Please try again later.\n        </p>\n      ) : (\n        <MovieList trendingMovies={trendingMovies} />\n      )}\n      {/* Відображення списку трендових фільмів */}\n    </>\n  );\n};\n\nexport default Home;\n","export const API_KEY = '84068d2acd9315c3be219a34cf5a6c3a';\n","import axios from 'axios';\nimport { API_KEY } from './ApiKey';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport const fetchTrendMovies = async () => {\n  const { data } = await axios.get(`/trending/movie/day?api_key=${API_KEY}`);\n\n  return data;\n};\n\nexport const fetchMoviesBySearch = async query => {\n  const { data } = await axios.get(\n    `/search/movie?api_key=${API_KEY}&language=en-US&query=${query}`\n  );\n\n  return data;\n};\n\nexport const fetchMovieById = async movieId => {\n  const { data } = await axios.get(\n    `/movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n\n  return data;\n};\n\nexport const fetchMovieCast = async movieId => {\n  const { data } = await axios.get(\n    `/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n\n  return data;\n};\n\nexport const fetchMovieReviews = async movieId => {\n  const { data } = await axios.get(\n    `/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  return data;\n};\n"],"names":["StyledHeader","styled","StyledNavLink","NavLink","bounce","keyframes","LoadingDots","Dot","delay","StyledSection","SectionTitle","List","ListItem","StyledLink","Link","trendingMovies","map","trendingMovie","to","id","title","useState","setTrendingMovies","isLoading","setIsLoading","error","setError","useEffect","fetchTrendingMovies","fetchTrendMovies","results","LoadingIndicator","API_KEY","axios","data","fetchMoviesBySearch","query","fetchMovieById","movieId","fetchMovieCast","fetchMovieReviews"],"sourceRoot":""}